name: Postgres Test

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  migration-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 20, 22, 24 ]
        postgres_version: [ 13, 14, 15, 16, 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Postgres Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  config-1-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Config 1 Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Write config
        run: |
          mkdir -p config
          cat > config/default.json << 'EOF'
          {
            "db": {
              "user": "ubuntu",
              "password": "ubuntu",
              "host": "localhost",
              "port": "5432",
              "database": "integration_test"
            }
          }
          EOF

      - name: Integration Test
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  config-2-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Config 2 Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Write URL object config
        run: |
          mkdir -p config
          cat > config/default.json << 'EOF'
          {
            "db": {
              "url": {
                "connectionString": "postgres://ubuntu:ubuntu@localhost:5432/integration_test"
              }
            }
          }
          EOF

      - name: Integration Test for URL object config
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  dotenv-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Dotenv Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Write config
        run: |
          cat > .env << 'EOF'
          DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/integration_test
          EOF

      - name: Integration Test
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  dotenv-expand-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Dotenv Expand Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Write config
        run: |
          cat > .env << 'EOF'
          POSTGRES_USER=ubuntu
          POSTGRES_PASSWORD=ubuntu
          POSTGRES_DB=integration_test
          DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
          EOF

      - name: Integration Test
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  password-1-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          # can't use characters @#?/ in password - they have special meaning in url
          POSTGRES_PASSWORD: 123456abcdefghABCDEFGH~\`\!$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'\|\\
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Password 1 Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps
        env:
          DATABASE_URL: postgres://ubuntu:123456abcdefghABCDEFGH~\`\!$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'\|\\@localhost:5432/integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  password-2-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: 123456abcdefghABCDEFGH~`!$%^&*-_=+{}[]()<>,.;:"'|\
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Password 2 Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Write config
        run: |
          mkdir -p config
          cat > config/default.json << 'EOF'
          {
            "db": {
              "user": "ubuntu",
              "password": "123456abcdefghABCDEFGH~`!$%^&*-_=+{}[]()<>,.;:\"'|\\",
              "host": "localhost",
              "port": "5432",
              "database": "integration_test"
            }
          }
          EOF

      - name: Integration Test
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  env-vars-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: 123456abcdefghABCDEFGH~\`\!@#$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'?\|/\\
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Env Vars Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: pnpm run migrate up -m test/migrations && pnpm run migrate down 0 -m test/migrations --timestamps
        env:
          PGHOST: localhost
          PGUSER: ubuntu
          PGPASSWORD: 123456abcdefghABCDEFGH~\`\!@#$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'?\|/\\
          PGDATABASE: integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  schema-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Schema Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: pnpm run migrate up -s myschema --create-schema -m test/migrations && pnpm run migrate down 0 -s myschema -m test/migrations --timestamps
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test
          SCHEMA: myschema

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  schemas-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'Schemas Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: pnpm run migrate up -s myschema public --create-schema -m test/migrations && pnpm run migrate down 0 -s myschema public -m test/migrations --timestamps
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test
          SCHEMA: myschema

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  typescript-migration-via-ts-node-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'TypeScript Migration Test with ts-node: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: pnpm run migrate up --tsconfig tsconfig.json --ts-node -m test/ts/migrations && pnpm run migrate down 0 --tsconfig tsconfig.json --ts-node -m test/ts/migrations --timestamps
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  typescript-migration-via-tsx-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'TypeScript Migration Test with tsx: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: pnpm run migrate up --tsconfig tsconfig.json --tsx -m test/ts/migrations && pnpm run migrate down 0 --tsconfig tsconfig.json --tsx -m test/ts/migrations --timestamps
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  typescript-customrunner-url-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'TypeScript Customrunner Url Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: node --experimental-specifier-resolution=node --loader ts-node/esm test/ts/customRunnerDBUrl.ts
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  typescript-customrunner-client-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'TypeScript Customrunner Client Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: node --experimental-specifier-resolution=node --loader ts-node/esm test/ts/customRunnerDBClient.ts
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"

  typescript-customrunner-undef-count-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}-alpine
        env:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ubuntu
          POSTGRES_DB: integration_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: 'TypeScript Customrunner undef count Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Integration Test
        run: node --experimental-specifier-resolution=node --loader ts-node/esm test/ts/customRunnerUndefCount.ts
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test

      - name: Postgres logs
        if: always()
        run: docker logs "${{ job.services.postgres.id }}"
  
  ssl-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [ 22 ]
        postgres_version: [ 17 ]
      fail-fast: false
    timeout-minutes: 10

    name: 'SSL Test: pg-${{ matrix.postgres_version }}, node-${{ matrix.node_version }}, ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Create SSL certificates
        run: |
          mkdir -p /tmp/ssl
          cd /tmp/ssl
          openssl genrsa -out ca.key 2048
          openssl req -x509 -new -nodes -key ca.key -sha256 -days 365 -out ca.crt -subj "/C=US/ST=Test/L=Test/O=Test CA/CN=Test CA"
          openssl genrsa -out server.key 2048
          openssl req -new -key server.key -out server.csr -subj "/C=US/ST=Test/L=Test/O=Test/CN=localhost"
          openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -sha256
          chmod 600 server.key
          chmod 644 server.crt ca.crt

      - name: Start PostgreSQL with SSL
        run: |
          mkdir -p /tmp/pgdata
          chmod 777 /tmp/pgdata
          docker run -d \
            --name postgres-ssl \
            -e POSTGRES_USER=ubuntu \
            -e POSTGRES_PASSWORD=ubuntu \
            -e POSTGRES_DB=integration_test \
            -v /tmp/pgdata:/var/lib/postgresql/data \
            -v /tmp/ssl:/ssl \
            -p 5432:5432 \
            postgres:${{ matrix.postgres_version }}-alpine \
            -c ssl=on -c ssl_cert_file=/ssl/server.crt -c ssl_key_file=/ssl/server.key -c ssl_ca_file=/ssl/ca.crt
          docker exec postgres-ssl chown postgres:postgres /ssl/server.key
          docker exec postgres-ssl chmod 600 /ssl/server.key
          docker exec postgres-ssl chmod 644 /ssl/server.crt /ssl/ca.crt

          timeout=60
          while ! docker exec postgres-ssl pg_isready -U ubuntu -d integration_test; do
            sleep 2
            timeout=$((timeout-2))
            if [ $timeout -le 0 ]; then
              docker logs postgres-ssl
              exit 1
            fi
          done

      - name: Test SSL connection with URL parameters (should work)
        run: |
          pnpm run migrate up -m test/migrations
          pnpm run migrate down 0 -m test/migrations --timestamps
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test?ssl=true

      - name: Test SSL connection with --ssl-ca flag (should work)
        run: |
          pnpm run migrate up -m test/migrations --ssl-ca /tmp/ssl/server.crt
          pnpm run migrate down 0 -m test/migrations --timestamps --ssl-ca /tmp/ssl/server.crt
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test

      - name: Test non-SSL connection (should fail when SSL is required)
        run: |
          if pnpm run migrate up -m test/migrations; then
            echo "ERROR: Non-SSL connection should have failed but succeeded"
            exit 1
          else
            echo "SUCCESS: Non-SSL connection failed as expected"
          fi
        env:
          DATABASE_URL: postgres://ubuntu:ubuntu@localhost:5432/integration_test?ssl=false
        continue-on-error: true

      - name: Postgres logs
        if: always()
        run: docker logs postgres-ssl

      - name: Cleanup
        if: always()
        run: |
          docker stop postgres-ssl || true
          docker rm postgres-ssl || true
          rm -rf /tmp/ssl /tmp/pgdata || true
