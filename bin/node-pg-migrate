#!/usr/bin/env node
/* eslint-disable strict, no-console */

'use strict'

const fs = require('fs')
const util = require('util')
const path = require('path')
const yargs = require('yargs')
const ConnectionParameters = require('pg/lib/connection-parameters')
const { default: migrationRunner, Migration } = require('../dist')

process.on('uncaughtException', (err) => {
  console.error(err)
  process.exit(1)
})

function tryRequire(moduleName) {
  try {
    // eslint-disable-next-line import/no-dynamic-require,global-require,security/detect-non-literal-require
    return require(moduleName)
  } catch (err) {
    if (err.code !== 'MODULE_NOT_FOUND') {
      throw err
    }
    return null
  }
}

const schemaArg = 'schema'
const createSchemaArg = 'create-schema'
const databaseUrlVarArg = 'database-url-var'
const migrationsDirArg = 'migrations-dir'
const migrationsTableArg = 'migrations-table'
const migrationsSchemaArg = 'migrations-schema'
const createMigrationsSchemaArg = 'create-migrations-schema'
const migrationFileLanguageArg = 'migration-file-language'
const migrationFilenameFormatArg = 'migration-filename-format'
const templateFileNameArg = 'template-file-name'
const checkOrderArg = 'check-order'
const configValueArg = 'config-value'
const configFileArg = 'config-file'
const ignorePatternArg = 'ignore-pattern'
const singleTransactionArg = 'single-transaction'
const lockArg = 'lock'
const timestampArg = 'timestamp'
const dryRunArg = 'dry-run'
const fakeArg = 'fake'
const decamelizeArg = 'decamelize'
const tsconfigArg = 'tsconfig'
const verboseArg = 'verbose'
const rejectUnauthorizedArg = 'reject-unauthorized'
const envPathArg = 'envPath'

const { argv } = yargs
  .usage('Usage: $0 [up|down|create|redo] [migrationName] [options]')

  .option('d', {
    alias: databaseUrlVarArg,
    default: 'DATABASE_URL',
    describe: 'Name of env variable where is set the databaseUrl',
    type: 'string',
  })

  .option('m', {
    alias: migrationsDirArg,
    defaultDescription: '"migrations"',
    describe: 'The directory containing your migration files',
    type: 'string',
  })

  .option('t', {
    alias: migrationsTableArg,
    defaultDescription: '"pgmigrations"',
    describe: 'The table storing which migrations have been run',
    type: 'string',
  })

  .option('s', {
    alias: schemaArg,
    defaultDescription: '"public"',
    describe: 'The schema on which migration will be run (defaults to `public`)',
    type: 'string',
    array: true,
  })

  .option(createSchemaArg, {
    defaultDescription: 'false',
    describe: "Creates the configured schema if it doesn't exist",
    type: 'boolean',
  })

  .option(migrationsSchemaArg, {
    defaultDescription: 'Same as "schema"',
    describe: 'The schema storing table which migrations have been run',
    type: 'string',
  })

  .option(createMigrationsSchemaArg, {
    defaultDescription: 'false',
    describe: "Creates the configured migration schema if it doesn't exist",
    type: 'boolean',
  })

  .option(checkOrderArg, {
    defaultDescription: 'true',
    describe: 'Check order of migrations before running them',
    type: 'boolean',
  })

  .option(verboseArg, {
    defaultDescription: 'true',
    describe: 'Print debug messages - all DB statements run',
    type: 'boolean',
  })

  .option(ignorePatternArg, {
    defaultDescription: '"\\..*"',
    describe: 'Regex pattern for file names to ignore',
    type: 'string',
  })

  .option(decamelizeArg, {
    defaultDescription: 'false',
    describe: 'Runs decamelize on table/columns/etc names',
    type: 'boolean',
  })

  .option(configValueArg, {
    default: 'db',
    describe: 'Name of config section with db options',
    type: 'string',
  })

  .option('f', {
    alias: configFileArg,
    describe: 'Name of config file with db options',
    type: 'string',
  })

  .option('j', {
    alias: migrationFileLanguageArg,
    defaultDescription: 'last one used or "js" if there is no migration yet',
    choices: ['js', 'ts', 'sql'],
    describe: 'Language of the migration file (Only valid with the create action)',
    type: 'string',
  })

  .option(migrationFilenameFormatArg, {
    defaultDescription: '"timestamp"',
    choices: ['timestamp', 'utc'],
    describe: 'Prefix type of migration filename (Only valid with the create action)',
    type: 'string',
  })

  .option(templateFileNameArg, {
    describe: 'Path to template for creating migrations',
    type: 'string',
  })

  .option(tsconfigArg, {
    describe: 'Path to tsconfig.json file',
    type: 'string',
  })

  .option(envPathArg, {
    describe: 'Path to the .env file that should be used for configuration',
    type: 'string',
  })

  .option(dryRunArg, {
    default: false,
    describe: "Prints the SQL but doesn't run it",
    type: 'boolean',
  })

  .option(fakeArg, {
    default: false,
    describe: 'Marks migrations as run',
    type: 'boolean',
  })

  .option(singleTransactionArg, {
    default: true,
    describe:
      'Combines all pending migrations into a single database transaction so that if any migration fails, all will be rolled back',
    type: 'boolean',
  })

  .option(lockArg, {
    default: true,
    describe: 'When false, disables locking mechanism and checks',
    type: 'boolean',
  })

  .option(rejectUnauthorizedArg, {
    defaultDescription: 'false',
    describe: 'Sets rejectUnauthorized SSL option',
    type: 'boolean',
  })

  .option(timestampArg, {
    default: false,
    describe: 'Treats number argument to up/down migration as timestamp',
    type: 'boolean',
  })

  .version()
  .alias('version', 'i')
  .help()

if (argv.help || argv._.length === 0) {
  yargs.showHelp()
  process.exit(1)
}

/* Load env before accessing process.env */
const envPath = argv[envPathArg]

// Create default dotenv config
const dotenvConfig = { silent: true }

// If the path has been configured, add it to the config, otherwise don't change the default dotenv path
if (envPath) {
  dotenvConfig.path = envPath
}

const dotenv = tryRequire('dotenv')
if (dotenv) {
  // Load config from ".env" file
  const myEnv = dotenv.config(dotenvConfig)
  const dotenvExpand = tryRequire('dotenv-expand')
  if (dotenvExpand) {
    dotenvExpand(myEnv)
  }
}

let MIGRATIONS_DIR = argv[migrationsDirArg]
let DB_CONNECTION = process.env[argv[databaseUrlVarArg]]
let IGNORE_PATTERN = argv[ignorePatternArg]
let SCHEMA = argv[schemaArg]
let CREATE_SCHEMA = argv[createSchemaArg]
let MIGRATIONS_SCHEMA = argv[migrationsSchemaArg]
let CREATE_MIGRATIONS_SCHEMA = argv[createMigrationsSchemaArg]
let MIGRATIONS_TABLE = argv[migrationsTableArg]
let MIGRATIONS_FILE_LANGUAGE = argv[migrationFileLanguageArg]
let MIGRATIONS_FILENAME_FORMAT = argv[migrationFilenameFormatArg]
let TEMPLATE_FILE_NAME = argv[templateFileNameArg]
let CHECK_ORDER = argv[checkOrderArg]
let VERBOSE = argv[verboseArg]
let DECAMELIZE = argv[decamelizeArg]
let tsconfigPath = argv[tsconfigArg]

function readTsconfig() {
  if (tsconfigPath) {
    let tsconfig
    const json5 = tryRequire('json5')

    try {
      // eslint-disable-next-line security/detect-non-literal-fs-filename
      const config = fs.readFileSync(path.resolve(process.cwd(), tsconfigPath), { encoding: 'utf-8' })
      tsconfig = json5 ? json5.parse(config) : JSON.parse(config)
    } catch (err) {
      console.error("Can't load tsconfig.json:", err)
    }
    const tsnode = tryRequire('ts-node')
    if (!tsnode) {
      console.error("For TypeScript support, please install 'ts-node' module")
    }

    if (tsconfig && tsnode) {
      tsnode.register(tsconfig)
      if (!MIGRATIONS_FILE_LANGUAGE) {
        MIGRATIONS_FILE_LANGUAGE = 'ts'
      }
    } else {
      process.exit(1)
    }
  }
}

function readJson(json) {
  if (typeof json === 'object') {
    SCHEMA = typeof SCHEMA !== 'undefined' ? SCHEMA : json[schemaArg]
    CREATE_SCHEMA = typeof CREATE_SCHEMA !== 'undefined' ? CREATE_SCHEMA : json[createSchemaArg]
    MIGRATIONS_DIR = typeof MIGRATIONS_DIR !== 'undefined' ? MIGRATIONS_DIR : json[migrationsDirArg]
    MIGRATIONS_SCHEMA = typeof MIGRATIONS_SCHEMA !== 'undefined' ? MIGRATIONS_SCHEMA : json[migrationsSchemaArg]
    CREATE_MIGRATIONS_SCHEMA =
      typeof CREATE_MIGRATIONS_SCHEMA !== 'undefined' ? CREATE_MIGRATIONS_SCHEMA : json[createMigrationsSchemaArg]
    MIGRATIONS_TABLE = typeof MIGRATIONS_TABLE !== 'undefined' ? MIGRATIONS_TABLE : json[migrationsTableArg]
    MIGRATIONS_FILE_LANGUAGE =
      typeof MIGRATIONS_FILE_LANGUAGE !== 'undefined' ? MIGRATIONS_FILE_LANGUAGE : json[migrationFileLanguageArg]
    MIGRATIONS_FILENAME_FORMAT =
      typeof MIGRATIONS_FILENAME_FORMAT !== 'undefined' ? MIGRATIONS_FILENAME_FORMAT : json[migrationFilenameFormatArg]
    TEMPLATE_FILE_NAME = typeof TEMPLATE_FILE_NAME !== 'undefined' ? TEMPLATE_FILE_NAME : json[templateFileNameArg]
    IGNORE_PATTERN = typeof IGNORE_PATTERN !== 'undefined' ? IGNORE_PATTERN : json[ignorePatternArg]
    CHECK_ORDER = typeof CHECK_ORDER !== 'undefined' ? CHECK_ORDER : json[checkOrderArg]
    VERBOSE = typeof VERBOSE !== 'undefined' ? VERBOSE : json[verboseArg]
    DECAMELIZE = typeof DECAMELIZE !== 'undefined' ? DECAMELIZE : json[decamelizeArg]
    DB_CONNECTION = typeof DB_CONNECTION !== 'undefined' ? DB_CONNECTION : process.env[json[databaseUrlVarArg]]
    tsconfigPath = typeof tsconfigPath !== 'undefined' ? tsconfigPath : json[tsconfigArg]
    if (json.url) {
      DB_CONNECTION = typeof DB_CONNECTION !== 'undefined' ? DB_CONNECTION : json.url
    } else if (json.host || json.port || json.name || json.database) {
      DB_CONNECTION =
        typeof DB_CONNECTION !== 'undefined'
          ? DB_CONNECTION
          : {
              user: json.user,
              host: json.host || 'localhost',
              database: json.name || json.database,
              password: json.password,
              port: json.port || 5432,
              ssl: json.ssl,
            }
    }
  } else {
    DB_CONNECTION = typeof DB_CONNECTION !== 'undefined' ? DB_CONNECTION : json
  }
}

// Load config (and suppress the no-config-warning)
const oldSuppressWarning = process.env.SUPPRESS_NO_CONFIG_WARNING
process.env.SUPPRESS_NO_CONFIG_WARNING = 1
const config = tryRequire('config')
if (config && config.has(argv[configValueArg])) {
  const db = config.get(argv[configValueArg])
  readJson(db)
}
process.env.SUPPRESS_NO_CONFIG_WARNING = oldSuppressWarning

const configFileName = argv[configFileArg]
if (configFileName) {
  // eslint-disable-next-line global-require,import/no-dynamic-require,security/detect-non-literal-require
  const jsonConfig = require(path.resolve(configFileName))
  readJson(jsonConfig)
}
readTsconfig()

const action = argv._.shift()

// defaults
MIGRATIONS_DIR = typeof MIGRATIONS_DIR === 'undefined' ? `${process.cwd()}/migrations` : MIGRATIONS_DIR
MIGRATIONS_TABLE = typeof MIGRATIONS_TABLE === 'undefined' ? 'pgmigrations' : MIGRATIONS_TABLE
SCHEMA = typeof SCHEMA === 'undefined' ? 'public' : SCHEMA
IGNORE_PATTERN = typeof IGNORE_PATTERN === 'undefined' ? '\\..*' : IGNORE_PATTERN
CHECK_ORDER = typeof CHECK_ORDER === 'undefined' ? true : CHECK_ORDER
VERBOSE = typeof VERBOSE === 'undefined' ? true : VERBOSE

if (action === 'create') {
  // replaces spaces with dashes - should help fix some errors
  let newMigrationName = argv._.length ? argv._.join('-') : ''
  // forces use of dashes in names - keep thing clean
  newMigrationName = newMigrationName.replace(/[_ ]+/g, '-')

  if (!newMigrationName) {
    console.error("'migrationName' is required.")
    yargs.showHelp()
    process.exit(1)
  }

  Migration.create(newMigrationName, MIGRATIONS_DIR, {
    filenameFormat: MIGRATIONS_FILENAME_FORMAT,
    ...(TEMPLATE_FILE_NAME
      ? { templateFileName: TEMPLATE_FILE_NAME }
      : {
          language: MIGRATIONS_FILE_LANGUAGE,
          ignorePattern: IGNORE_PATTERN,
        }),
  })
    .then((migrationPath) => {
      console.log(util.format('Created migration -- %s', migrationPath))
      process.exit(0)
    })
    .catch((err) => {
      console.error(err)
      process.exit(1)
    })
} else if (action === 'up' || action === 'down' || action === 'redo') {
  if (!DB_CONNECTION) {
    const cp = new ConnectionParameters()
    if (!cp.host && !cp.port && !cp.database) {
      console.error(`The $${argv[databaseUrlVarArg]} environment variable is not set.`)
      process.exit(1)
    }
    DB_CONNECTION = cp
  }

  const dryRun = argv[dryRunArg]
  if (dryRun) {
    console.log('dry run')
  }

  const singleTransaction = argv[singleTransactionArg]
  const fake = argv[fakeArg]
  const TIMESTAMP = argv[timestampArg]
  const rejectUnauthorized = argv[rejectUnauthorizedArg]
  const noLock = !argv[lockArg]
  if (noLock) {
    console.log('no lock')
  }

  const updownArg = argv._.length ? argv._[0] : null
  let numMigrations
  let migrationName

  if (updownArg !== null) {
    // eslint-disable-next-line eqeqeq
    if (parseInt(updownArg, 10) == updownArg) {
      numMigrations = parseInt(updownArg, 10)
    } else {
      migrationName = argv._.join('-').replace(/_ /g, '-')
    }
  }

  const databaseUrl = typeof DB_CONNECTION === 'string' ? { connectionString: DB_CONNECTION } : DB_CONNECTION

  const options = (direction, _count, _timestamp) => {
    const count = _count === undefined ? numMigrations : _count
    const timestamp = _timestamp === undefined ? TIMESTAMP : _timestamp
    return {
      dryRun,
      databaseUrl: {
        ...databaseUrl,
        ...(typeof rejectUnauthorized === 'boolean' ? { ssl: { ...databaseUrl.ssl, rejectUnauthorized } } : undefined),
      },
      dir: MIGRATIONS_DIR,
      ignorePattern: IGNORE_PATTERN,
      schema: SCHEMA,
      createSchema: CREATE_SCHEMA,
      migrationsSchema: MIGRATIONS_SCHEMA,
      createMigrationsSchema: CREATE_MIGRATIONS_SCHEMA,
      migrationsTable: MIGRATIONS_TABLE,
      count,
      timestamp,
      file: migrationName,
      checkOrder: CHECK_ORDER,
      verbose: VERBOSE,
      direction,
      singleTransaction,
      noLock,
      fake,
      decamelize: DECAMELIZE,
    }
  }
  const promise =
    action === 'redo'
      ? migrationRunner(options('down')).then(() => migrationRunner(options('up', Infinity, false)))
      : migrationRunner(options(action))
  promise
    .then(() => {
      console.log('Migrations complete!')
      process.exit(0)
    })
    .catch((err) => {
      console.error(err)
      process.exit(1)
    })
} else {
  console.error('Invalid Action: Must be [up|down|create|redo].')
  yargs.showHelp()
  process.exit(1)
}

if (argv['force-exit']) {
  console.log('Forcing exit')
  process.exit(0)
}
