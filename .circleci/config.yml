version: 2

node-image: &node-image
  image: circleci/node:17

set-npm-global: &set-npm-global
  run:
    name: set-npm-global
    command: |
      mkdir -p ~/.npm-global
      npm config set prefix '~/.npm-global'
      echo 'export NPM_CONFIG_PREFIX=~/.npm-global' >> $BASH_ENV
      echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV
      source $BASH_ENV
      npm install -g pnpm

save: &save
  save_cache:
    key: code-{{ .Revision }}
    paths:
      - .
      - '~/.npm-global'

restore: &restore
  restore_cache:
    key: code-{{ .Revision }}

postgres-wait: &postgres-wait
  run:
    name: Wait for DB
    command: dockerize -wait tcp://127.0.0.1:5432 -timeout 120s

test-postgres: &test-postgres
  run:
    name: test
    command: npm run migrate up -- -m test/migrations && npm run migrate down 0 -- -m test/migrations --timestamps

cockroach-wait: &cockroach-wait
  run:
    name: Wait for DB
    command: |
      dockerize -wait tcp://127.0.0.1:26257 -timeout 120s && node -e '
        (new (require("pg").Pool)({ connectionString: process.env.DATABASE_URL }))
          .query(
            "CREATE DATABASE circle_test",
            err => (process.exitCode = err ? 1 : 0) && process.stdout.write(err.stack)
          )
      '

jobs:
  install:
    docker:
      - <<: *node-image
    steps:
      - checkout
      - <<: *set-npm-global
      - restore_cache:
          key: dependency-cache-{{ checksum "pnpm-lock.yaml" }}
      - run: npm i
      - save_cache:
          key: dependency-cache-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ./node_modules
      - <<: *save
  lint:
    docker:
      - <<: *node-image
    steps:
      - <<: *restore
      - run: npm run lint
  test:
    docker:
      - <<: *node-image
    steps:
      - <<: *restore
      - run: npm test
  test-pg-9:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:9.6-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-pg-10:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:10.19-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-pg-11:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:11.14-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-pg-12:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:12.9-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-pg-13:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:13.5-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-pg-14:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-cockroach-1:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgresql://root@localhost:26257/circle_test
      - image: cockroachdb/cockroach:v1.1.9
        command: ['start', '--insecure', '--host=localhost']
    steps:
      - <<: *restore
      - <<: *cockroach-wait
      - run:
          name: test
          command: npm run migrate up -- -m test/cockroach -s '' --migrations-schema circle_test --no-lock && npm run migrate down 0 -- -m test/cockroach -s '' --migrations-schema circle_test --no-lock --timestamps
  test-cockroach-2:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgresql://root@localhost:26257/circle_test
      - image: cockroachdb/cockroach:v2.1.11
        command: ['start', '--insecure', '--host=localhost']
    steps:
      - <<: *restore
      - <<: *cockroach-wait
      - run:
          name: test
          command: npm run migrate up -- -m test/cockroach --no-lock && npm run migrate down 0 -- -m test/cockroach --no-lock --timestamps
  test-cockroach-19:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgresql://root@localhost:26257/circle_test
      - image: cockroachdb/cockroach:v19.2.12
        command: ['start', '--insecure', '--host=localhost']
    steps:
      - <<: *restore
      - <<: *cockroach-wait
      - run:
          name: test
          command: npm run migrate up -- -m test/cockroach --no-lock && npm run migrate down 0 -- -m test/cockroach --no-lock --timestamps
  test-cockroach-20:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgresql://root@localhost:26257/circle_test
      - image: cockroachdb/cockroach:v20.2.18
        command: ['start-single-node', '--insecure', '--host=localhost']
    steps:
      - <<: *restore
      - <<: *cockroach-wait
      - run:
          name: test
          command: npm run migrate up -- -m test/cockroach --no-lock && npm run migrate down 0 -- -m test/cockroach --no-lock --timestamps
  test-cockroach-21:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgresql://root@localhost:26257/circle_test
      - image: cockroachdb/cockroach:v21.2.3
        command: ['start-single-node', '--insecure', '--host=localhost']
    steps:
      - <<: *restore
      - <<: *cockroach-wait
      - run:
          name: test
          command: npm run migrate up -- -m test/cockroach --no-lock && npm run migrate down 0 -- -m test/cockroach --no-lock --timestamps
  test-node-12:
    docker:
      - image: circleci/node:12.20.0
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-node-14:
    docker:
      - image: circleci/node:14
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-node-16:
    docker:
      - image: circleci/node:16
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-node-17:
    docker:
      - image: circleci/node:17
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:13.5-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-config:
    docker:
      - <<: *node-image
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - run:
          name: create-config
          command: |
            mkdir -p config
            cat > config/default.json << 'EOF'
            {
              "db": {
                "user": "ubuntu",
                "password": "ubuntu",
                "host": "localhost",
                "port": "5432",
                "database": "circle_test"
              }
            }
            EOF
      - <<: *postgres-wait
      - <<: *test-postgres
  test-dotenv:
    docker:
      - <<: *node-image
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - run:
          name: create-config
          command: |
            cat > .env << 'EOF'
            DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
            EOF
      - <<: *postgres-wait
      - <<: *test-postgres
  test-dotenv-expand:
    docker:
      - <<: *node-image
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - run:
          name: create-config
          command: |
            cat > .env << 'EOF'
            POSTGRES_USER=ubuntu
            POSTGRES_PASSWORD=ubuntu
            POSTGRES_DB=circle_test
            DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
            EOF
      - <<: *postgres-wait
      - <<: *test-postgres
  test-password-1:
    docker:
      - <<: *node-image
        environment:
          # can't use characters @#?/ in password - they have special meaning in url
          - DATABASE_URL=postgres://ubuntu:123456abcdefghABCDEFGH~\`\!$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'\|\\@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=123456abcdefghABCDEFGH~\`\!$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'\|\\
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-password-2:
    docker:
      - <<: *node-image
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=123456abcdefghABCDEFGH~\`\!@#$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'?\|/\\
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - run:
          name: create-config
          command: |
            mkdir -p config
            cat > config/default.json << 'EOF'
            {
              "db": {
                "user": "ubuntu",
                "password": "123456abcdefghABCDEFGH~`!@#$%^&*-_=+{}[]()<>,.;:\"'?|/\\",
                "host": "localhost",
                "port": "5432",
                "database": "circle_test"
              }
            }
            EOF
      - <<: *postgres-wait
      - <<: *test-postgres
  test-env-vars:
    docker:
      - <<: *node-image
        environment:
          - PGUSER=ubuntu
          - PGPASSWORD=123456abcdefghABCDEFGH~\`\!@#$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'?\|/\\
          - PGDATABASE=circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=123456abcdefghABCDEFGH~\`\!@#$%^\&*-_=+{}[]\(\)\<\>,.\;:\"\'?\|/\\
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - <<: *test-postgres
  test-schema:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
          # used in tests
          - SCHEMA=myschema
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - run:
          name: test
          command: npm run migrate up -- -s myschema --create-schema -m test/migrations && npm run migrate down 0 -- -s myschema -m test/migrations --timestamps
  test-schemas:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
          # used in tests
          - SCHEMA=myschema
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - run:
          name: test
          command: npm run migrate up -- -s myschema public --create-schema -m test/migrations && npm run migrate down 0 -- -s myschema public -m test/migrations --timestamps
  test-typescript-migration:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - run:
          name: test
          command: npm run migrate up -- --tsconfig tsconfig.json -m test/ts/migrations && npm run migrate down 0 -- --tsconfig tsconfig.json -m test/ts/migrations --timestamps
  test-typescript-customrunner-url:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - run:
          name: test
          command: $(npm bin)/ts-node test/ts/customRunnerDBUrl.ts
  test-typescript-customrunner-client:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - run:
          name: test
          command: $(npm bin)/ts-node test/ts/customRunnerDBClient.ts
  test-typescript-customrunner-undef-count:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@localhost:5432/circle_test
      - image: postgres:14.1-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *postgres-wait
      - run:
          name: test
          command: $(npm bin)/ts-node test/ts/customRunnerUndefCount.ts
  test-create-migration:
    docker:
      - <<: *node-image
    steps:
      - <<: *restore
      - run:
          name: check dir does not exists
          command: |
            [ ! -d migrations ]
      - run:
          name: create migration
          command: npm run migrate create test
      - run:
          name: check file was created
          command: |
            [ $(ls -1 migrations | wc -l) -eq 1 ]

workflows:
  version: 2
  main_workflow:
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - test-pg-9:
          requires:
            - install
      - test-pg-10:
          requires:
            - install
      - test-pg-11:
          requires:
            - install
      - test-pg-12:
          requires:
            - install
      - test-pg-13:
          requires:
            - install
      - test-pg-14:
          requires:
            - install
      - test-cockroach-1:
          requires:
            - install
      - test-cockroach-2:
          requires:
            - install
      - test-cockroach-19:
          requires:
            - install
      - test-cockroach-20:
          requires:
            - install
      - test-cockroach-21:
          requires:
            - install
      - test-node-12:
          requires:
            - install
      - test-node-14:
          requires:
            - install
      - test-node-16:
          requires:
            - install
      - test-node-17:
          requires:
            - install
      - test-config:
          requires:
            - install
      - test-dotenv:
          requires:
            - install
      - test-dotenv-expand:
          requires:
            - install
      - test-password-1:
          requires:
            - install
      - test-password-2:
          requires:
            - install
      - test-env-vars:
          requires:
            - install
      - test-schema:
          requires:
            - install
      - test-schemas:
          requires:
            - install
      - test-typescript-migration:
          requires:
            - install
      - test-typescript-customrunner-url:
          requires:
            - install
      - test-typescript-customrunner-client:
          requires:
            - install
      - test-typescript-customrunner-undef-count:
          requires:
            - install
      - test-create-migration:
          requires:
            - install
